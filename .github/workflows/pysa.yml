# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow integrates Python Static Analyzer (Pysa) with
# GitHub's Code Scanning feature.
#
# Python Static Analyzer (Pysa) is a security-focused static
# analysis tool that tracks flows of data from where they
# originate to where they terminate in a dangerous location.
#
# See https://pyre-check.org/docs/pysa-basics/

name: Pysa

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '25 11 * * 1'

permissions:
  contents: read

jobs:
  pysa:
    permissions:
      actions: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyre-check jq

      - name: Create Pyre configuration
        run: |
          cat > .pyre_configuration <<EOF
          {
            "source_directories": ["."],
            "exclude": [".git", ".github", "__pycache__", "notebooks_repo"],
            "search_path": [{"site-package": "flask"}, {"site-package": "sqlalchemy"}]
          }
          EOF

      - name: Initialize Pyre
        run: |
          pyre --version
          pyre init

      - name: Run Pysa and generate SARIF
        run: |
          # Create a minimal valid SARIF file in case Pysa fails
          echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Pysa","rules":[]}},"results":[]}]}' > pysa-results.sarif
          
          # Run Pysa analysis
          pyre analyze --save-results-to .pyre/pysa-results || true
          
          # Generate SARIF output
          pyre --output=sarif > pysa-results.sarif || true
          
          # Validate JSON and fix if needed
          jq . pysa-results.sarif > pysa-validated.sarif || cp pysa-results.sarif pysa-validated.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: pysa-validated.sarif